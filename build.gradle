buildscript {
    repositories {
        mavenCentral()
        maven { url jupyterApiTCRepo }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-jupyter-api-gradle-plugin:$jupyterApiVersion"
    }
}

plugins {
    id "com.google.devtools.ksp" version "$kspVersion"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "org.jetbrains.dataframe.generator"
    id "org.jetbrains.kotlin.libs.publisher" version "$libsPublisherVersion"
    id("io.github.devcrocod.korro") version "0.1.1-dev-29"
    id("org.jmailen.kotlinter") version "$ktlint_version"
    id("org.jetbrains.kotlin.plugin.dataframe") version "0.8.0-dev-456"
    id("org.jetbrains.kotlin.plugin.serialization") version "$kotlin_version"
}

apply plugin: "org.jetbrains.kotlin.jupyter.api"

repositories {
    mavenCentral()
    maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }
    maven { url jupyterApiTCRepo }
}

configurations {
    testImplementation.extendsFrom compileOnly
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation "org.apache.commons:commons-csv:1.8"
    implementation "com.beust:klaxon:5.5"
    implementation "com.github.kittinunf.fuel:fuel:2.3.1"

    implementation "org.jetbrains.kotlinx:kotlinx-datetime-jvm:0.3.1"

    testImplementation "junit:junit:4.12"
    testImplementation("io.kotest:kotest-assertions-core:4.6.0") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
    }
    testImplementation("org.jetbrains.kotlinx:kotlin-jupyter-kernel:$jupyterApiVersion") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk7"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
    }
    testImplementation "org.jetbrains.kotlin:kotlin-scripting-jvm"
    testImplementation 'org.jsoup:jsoup:1.14.3'

    // needed to work around https://youtrack.jetbrains.com/issue/KT-15064
    compileOnly "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

kotlin {
    explicitApi()
}

tasks.withType(JavaCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

group 'org.jetbrains.kotlinx'

def detectVersion() {
    def buildNumber = rootProject.findProperty("build.number")
    if(buildNumber != null) {
        if (rootProject.findProperty("build.number.detection") == "true") {
            return property('version') + "-dev-" + buildNumber
        } else {
            return buildNumber
        }
    }
    else if(hasProperty("release")) {
        return property('version')
    } else {
        return property('version') + "-dev"
    }
}

task detectVersionForTC {
    doLast {
        println("##teamcity[buildNumber '$version']")
    }
}

version detectVersion()
def v = version
println("Current DataFrame version: $v")

subprojects {
    version = v
}

kotlinPublications {
    fairDokkaJars.set(false)

    sonatypeSettings(
            project.findProperty("kds.sonatype.user"),
            project.findProperty("kds.sonatype.password"),
            "dataframe project, v. ${project.version}"
    )

    signingCredentials(
            project.findProperty("kds.sign.key.id"),
            project.findProperty("kds.sign.key.private"),
            project.findProperty("kds.sign.key.passphrase")
    )

    pom {
        use(org.jetbrains.kotlinx.publisher.PomUtilKt) {
            githubRepo("Kotlin", "dataframe")
            inceptionYear.set("2021")
            licenses {
                apache2()
            }
            developers {
                developer("nikitinas", "Anatoly Nikitin", "Anatoly.Nikitin@jetbrains.com")
            }
        }
    }

    publication {
        publicationName.set("api")
        artifactId.set(projectName)
        description.set("Data processing in Kotlin")
        packageName.set(artifactId)
    }

    localRepositories {
        maven {
            url = project.file(new File(buildDir, "maven")).toURI()
        }
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes", "-Xopt-in=kotlin.RequiresOptIn"]
    }
}

lintKotlinMain {
    exclude '**/*keywords*/**'
}

lintKotlinTest {
    exclude {
        it.name.endsWith(".Generated.kt")
    }
    exclude {
        it.name.endsWith("\$Extensions.kt")
    }
}

lintKotlinTest.enabled = true

kotlinter {
    ignoreFailures = false
    reporters = ['checkstyle', 'plain']
    experimentalRules = true
    disabledRules = [
            'no-wildcard-imports',
            'experimental:spacing-between-declarations-with-annotations',
            'experimental:enum-entry-name-case',
            'experimental:argument-list-wrapping',
            'experimental:annotation',
            'max-line-length',
            'filename'
    ]
}

korro {
    docs = fileTree(rootProject.rootDir) {
        include("docs/StardustDocs/topics/*.md")
    }

    samples = fileTree(rootProject.rootDir) {
        include("src/test/kotlin/org/jetbrains/kotlinx/dataframe/samples/*.kt")
        include("src/test/kotlin/org/jetbrains/kotlinx/dataframe/samples/api/*.kt")
    }

    groupSamples {

        beforeSample = "<tab title=\"NAME\">\n"
        afterSample = "\n</tab>"

        funSuffix("_properties") {
            replaceText("NAME", "Properties")
        }
        funSuffix("_accessors") {
            replaceText("NAME", "Accessors")
        }
        funSuffix("_strings") {
            replaceText("NAME", "Strings")
        }
        beforeGroup = "<tabs>\n"
        afterGroup = "</tabs>"
    }
}

configurations {
    instrumentedJars {
        canBeConsumed = true
        canBeResolved = false
    }
}

artifacts {
    instrumentedJars(jar.archiveFile) {
        builtBy(jar)
    }
}

test {
    maxHeapSize = "2048m"
}

sourceSets {
    main.kotlin.srcDir("build/generated/ksp/main/kotlin/")
    test.kotlin.srcDir("build/generated/ksp/test/kotlin/")
}

dataframes {
    schema {
        sourceSet = "test"
        visibility = "implicit_public"
        data = "https://raw.githubusercontent.com/Kotlin/dataframe/master/data/jetbrains_repositories.csv"
        name = "org.jetbrains.kotlinx.dataframe.samples.api.Repository"
    }
}
